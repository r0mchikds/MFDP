import os
import shutil
import time
from datetime import datetime
import papermill as pm
import argparse


log_path = "pipeline_log.txt"

def log(msg):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    full_msg = f"[{timestamp}] {msg}"
    print(full_msg)
    with open(log_path, "a", encoding="utf-8") as f:
        f.write(full_msg + "\n")

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser()
parser.add_argument("--skip-cleanup", action="store_true", help="–ù–µ –æ—á–∏—â–∞—Ç—å –ø–∞–ø–∫—É data/")
parser.add_argument("--clean-only", action="store_true", help="–¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ data/, –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –Ω–æ—É—Ç–±—É–∫–æ–≤")
parser.add_argument("--only", type=str, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫")
parser.add_argument("--up-to", type=str, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–æ—É—Ç–±—É–∫–∏ –î–û —ç—Ç–æ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ")
parser.add_argument("--from_", dest="from_nb", type=str, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–æ—É—Ç–±—É–∫–∏ –ù–ê–ß–ò–ù–ê–Ø —Å —ç—Ç–æ–≥–æ")
args = parser.parse_args()

# –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ data
if not args.skip_cleanup or args.clean_only:
    data_dir = "data"
    log("üßπ Cleaning up data/ directory...")
    for file in os.listdir(data_dir):
        path = os.path.join(data_dir, file)
        if file.endswith(".csv") and os.path.isfile(path):
            os.remove(path)
        elif file == "images" and os.path.isdir(path):
            shutil.rmtree(path)
    log("‚úÖ Data folder cleaned.\n")
else:
    log("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ data/ (--skip-cleanup)\n")

# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –æ—á–∏—â–∞—Ç—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
if args.clean_only:
    log("üß∫ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ—É—Ç–±—É–∫–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å (--clean-only).")
    exit(0)

# –°–ø–∏—Å–æ–∫ –Ω–æ—É—Ç–±—É–∫–æ–≤
notebooks = [
    "01_amazon_grocery_preprocessing_and_eda.ipynb",
    "02_amazon_grocery_interactions_preprocessing_and_eda.ipynb",
    "03_amazon_dataset_train_test_generation.ipynb",
    "04_model_training_and_evaluation.ipynb",
    "05_amazon_dataset_train_test_generation_rating_based.ipynb",
    "06_model_training_and_evaluation_rating_based.ipynb"
]

if args.only:
    notebooks = [args.only]
elif args.up_to:
    if args.up_to in notebooks:
        notebooks = notebooks[:notebooks.index(args.up_to) + 1]
    else:
        log(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ {args.up_to} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        exit(1)
elif args.from_nb:
    if args.from_nb in notebooks:
        notebooks = notebooks[notebooks.index(args.from_nb):]
    else:
        log(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ {args.from_nb} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        exit(1)

# –ü—Ä–æ–≥–æ–Ω –∫–∞–∂–¥–æ–≥–æ –Ω–æ—É—Ç–±—É–∫–∞
for nb in notebooks:
    log(f"üöÄ START: {nb}")
    start = time.time()

    pm.execute_notebook(
        input_path=nb,
        output_path=nb,
        kernel_name="python3"
    )

    duration = time.time() - start
    log(f"‚úÖ DONE: {nb} (‚è±Ô∏è {duration:.1f} sec)\n")
